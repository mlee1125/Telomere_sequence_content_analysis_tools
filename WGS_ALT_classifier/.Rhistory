require(ggplot2)
require(randomForest)
require(e1071)
require(ROCR)
require(stringr)
require(RColorBrewer)
require(reshape2)
training_data <- read.csv('./training_data.csv', header=TRUE, sep=',')
View(training_data)
training_data <- read.csv('./training_data.csv', header=TRUE, sep=',')
training_data
View(training_data)
summary(training_data)
training_data <- read.csv('./training_data.csv', header=TRUE, sep=',', row.names = 1)
summary(training_data)
View(training_data)
RF <- randomForest(TMM ~ ., data = training_data[,-15], replace = TRUE, mtry = 5, ntree = 500, proximity=TRUE, localImp=TRUE)
RF
importance(RF, scale=FALSE)
RF$importance
importance(RF, scale=FALSE)
RF$importance
RF$localImportance[,3]
summary(importance(RF, type=1))
importance(RF, type=1, scale=FALSE)
plot(RF)
importance(RF)
MDSplot(RF)
#PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf2 <- PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf
pred <- prediction(RF$votes[,2], RF[,"TMM"])
#PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf2 <- PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf
pred <- prediction(RF$votes[,2], training_data[,"TMM"])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=T)
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
perf
perf@y.values[[1]]
RF
perf
summary(perf)
perf
RF$votes[,2]
training_data[,"TMM"]
#PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf2 <- PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf
pred <- prediction(RF$votes[,1], training_data[,"TMM"])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=T)
#PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf2 <- PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf
pred <- prediction(RF$votes[,2], training_data[,"TMM"])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=T)
RF$votes
#Acc
perf <- performance(pred, "acc")
plot(perf)
#AUC
perf <- performance(pred, "auc")
perf@y.values[[1]]
perf <- performance(pred, "prec", "rec")
plot(perf, colorize=T)
MDSplot(RF, training_data$TMM)
#Acc
perf <- performance(pred, "acc")
plot(perf)
#AUC
perf <- performance(pred, "auc")
#AUC
perf <- performance(pred, "auc")
#AUC
perf <- performance(pred, "auc")
#AUC
perf <- performance(pred, "auc")
perf@y.values[[1]]
perf <- performance(pred, "prec", "rec")
plot(perf, colorize=T)
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
perf <- performance(pred, "tpr", "fpr")
#PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf2 <- PNET_Mela_telomeres_TTAGGGu_trimmed.full_rf
pred <- prediction(RF$votes[,2], training_data[,"TMM"])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=T)
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
plot(perf, colorize=T)
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
plot(RF)
importance(RF)
MDSplot(RF)
MDSplot(RF, training_data$TMM)
RF$votes[,2]
colnames(RF$votes)
write.csv(RF$votes, file = "training_data_OOB_testing_votes.csv")
print(RF$importance)
print(RF)
importance(RF, scale=FALSE)
print(importance(RF, scale=FALSE))
print(RF$importance)
RF$localImportance[,3]
summary(importance(RF, type=1))
summary(importance(RF, type=1))
importance(RF, type=1, scale=FALSE)
summary(importance(RF, type=1))
plot(RF)
importance(RF, type=1, scale=FALSE)
print(RF$importance)
importance(RF, type=1, scale=FALSE)
plot(RF)
importance(RF)
plot(RF)
importance(RF)
MDSplot(RF, training_data$TMM)
pred <- prediction(RF$votes[,2], training_data[,"TMM"])
perf <- performance(pred, "tpr", "fpr")
plot(perf, colorize=T)
ggplot(data.frame(TPR=perf@y.values[[1]], FPR=perf@x.values[[1]]), aes(FPR,TPR, colour='x'))+
scale_color_manual(values='blue')+
geom_step(size=1.5) +
theme(
panel.background = element_rect(colour='white', fill='white'),
panel.grid.major = element_line(colour='#525252'),
axis.text = element_text(size=rel(2)),
axis.title = element_text(size=rel(2))
) +
scale_x_continuous(limits = c(0,1))+
scale_y_continuous(limits = c(0,1))
require(ggplot2)
require(randomForest)
require(e1071)
require(ROCR)
require(stringr)
require(RColorBrewer)
require(reshape2)
input_data <- read.csv('./TCGA_telomere_counts_-_RF_input.csv', header=TRUE, sep=',', row.names = 1)
results <- predict(RF, input_data[,c('TTAGGG','ATAGGG','CTAGGG','GTAGGG','TAAGGG','TCAGGG','TGAGGG','TTCGGG','TTGGGG','TTTGGG','TTAAGG','TTACGG','TTATGG','TTAGAG','TTAGCG','TTAGTG','TTAGGA','TTAGGC','TTAGGT','TL_TN')], type = "prob")
results
write.csv(results, file = "/Users/mlee/OneDrive - CMRI/TMM classifier/RF_predictions.csv")
write.csv(results, file = "./RF_predictions.csv")
write.csv(results, file = "./output_TMM_predictions.csv")
